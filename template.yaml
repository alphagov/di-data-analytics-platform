AWSTemplateFormatVersion: 2010-09-09
Description: Data and Analytics Stack
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Description: Environment type
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - build
      - staging
      - integration
      - production
  CodeSigningConfigArn:
    Description: ARN of Code Signing Config from deployment pipeline
    Type: String
    Default: none
  PermissionsBoundary:
    Description: ARN of permissions boundary for new roles
    Type: String
    Default: none
  DeliveryStreamName:
    Description: Kinesis Firehose delivery stream name
    Type: String
    Default: dap-txma-delivery-stream
  RawGlueDatabaseName:
    Default: txma-raw
    Type: String
    Description: Name for the TxMA Raw Glue database
  StageGlueDatabaseName:
    Default: txma-stage
    Type: String
    Description: Name for the TxMA Stage Glue database

Conditions:
  UseCodeSigning: !Not
    - !Equals
      - !Ref CodeSigningConfigArn
      - none
  UsePermissionsBoundary: !Not
    - !Equals
      - !Ref PermissionsBoundary
      - none
  IsTest: !Equals [!Ref Environment, test]
  IsDev: !Equals [!Ref Environment, dev]
  IsBuild: !Equals [!Ref Environment, build]
  UsePlaceholderTxMAQueue: !Or
    - !Condition IsTest
    # todo uncomment when txma queue has been moved from dev to staging
    # - !Condition IsDev
    - !Condition IsBuild

Globals:
  Function:
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref 'AWS::NoValue'
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref 'AWS::NoValue'
    Runtime: nodejs18.x
    Timeout: 30
    CodeUri: dist/
    Environment:
      Variables:
        NODE_OPTIONS: '--enable-source-maps'

Resources:
  AthenaWorkgroupBucket:
    # checkov:skip=GDS_AWS_3: Check that all S3 buckets have corresponding bucket policies
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Sub ${Environment}-dap-athena-workgroup
      LoggingConfiguration:
        DestinationBucketName: !Ref GlobalLogBucket
        LogFilePrefix: dap-athena-workgroup/log
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  AthenaWorkGroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Sub ${Environment}-dap-txma-processing
      Description: DAP project
      State: ENABLED
      WorkGroupConfiguration:
        BytesScannedCutoffPerQuery: 200000000
        EnforceWorkGroupConfiguration: true
        PublishCloudWatchMetricsEnabled: false
        RequesterPaysEnabled: true
        ResultConfiguration:
          OutputLocation: !Sub 's3://${AthenaWorkgroupBucket}/txma/'

  AthenaGetConfigLambda:
    # checkov:skip=CKV_AWS_116: DLQ not needed for lambda driven by SQS
    # checkov:skip=CKV_AWS_117: VPC not needed for lambda
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub athena-get-config-${Environment}
      Handler: athena-get-config.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucket
              Resource: !Sub arn:aws:s3:::${Environment}-dap-elt-metadata/*
      ReservedConcurrentExecutions: 10
      Tags:
        Environment: !Ref Environment

  AthenaGetStatementLambda:
    # checkov:skip=CKV_AWS_116: DLQ not needed for lambda driven by SQS
    # checkov:skip=CKV_AWS_117: VPC not needed for lambda
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub athena-get-statement-${Environment}
      Handler: athena-get-statement.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucket
              Resource: !Sub arn:aws:s3:::${Environment}-dap-elt-metadata/*
      ReservedConcurrentExecutions: 10
      Tags:
        Environment: !Ref Environment

  EventConsumerQueue:
    Type: AWS::SQS::Queue
    Condition: UsePlaceholderTxMAQueue
    Properties:
      QueueName: !Sub ${Environment}-placeholder-txma-event-queue

  EventConsumerLambda:
    # checkov:skip=CKV_AWS_116: DLQ not needed for lambda driven by SQS
    # checkov:skip=CKV_AWS_117: VPC not needed for lambda
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: txma-event-consumer
      Events:
        CleanEvent:
          Type: SQS
          Properties:
            BatchSize: 1
            Queue: !If [UsePlaceholderTxMAQueue, !GetAtt EventConsumerQueue.Arn, '{{resolve:ssm:TxMAEventQueueARN}}']
            FunctionResponseTypes:
              - ReportBatchItemFailures
      Handler: txma-event-consumer.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - 'sqs:DeleteMessage'
                - 'sqs:GetQueueAttributes'
                - 'sqs:ReceiveMessage'
              Resource:
                !If [UsePlaceholderTxMAQueue, !GetAtt EventConsumerQueue.Arn, '{{resolve:ssm:TxMAEventQueueARN}}']
            - Effect: Allow
              Action: firehose:PutRecord
              Resource: !GetAtt KinesisFirehose.Arn
            - Effect: Allow
              Action: kms:decrypt
              Resource: !If [UsePlaceholderTxMAQueue, !Ref AWS::NoValue, '{{resolve:ssm:TxMAKMSKeyARN}}']
      ReservedConcurrentExecutions: 10
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
        Variables:
          FIREHOSE_STREAM_NAME: !Sub '${Environment}-${DeliveryStreamName}'
      Tags:
        Environment: !Ref Environment

  KinesisFirehose:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      DeliveryStreamName: !Sub ${Environment}-${DeliveryStreamName}
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt RawLayerBucket.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Sub ${Environment}-${DeliveryStreamName}
          LogStreamName: !Sub ${Environment}-${DeliveryStreamName}
        BufferingHints:
          IntervalInSeconds: !If [IsTest, 10, !If [IsDev, 60, 900]]
          SizeInMBs: 128
        RoleARN: !GetAtt IAMRoleKinesisFirehose.Arn
        Prefix: '!{partitionKeyFromQuery:datasource}/!{partitionKeyFromQuery:event_name}/year=!{partitionKeyFromQuery:year}/month=!{partitionKeyFromQuery:month}/day=!{partitionKeyFromQuery:day}/'
        CompressionFormat: GZIP
        ErrorOutputPrefix: kinesis-processing-errors-
        DynamicPartitioningConfiguration:
          Enabled: true
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: AppendDelimiterToRecord
            - Type: MetadataExtraction
              Parameters:
                - ParameterName: MetadataExtractionQuery
                  ParameterValue: '{datasource: "txma",event_name: .event_name,year:now | strftime("%Y"),month:now | strftime("%m"),day:now | strftime("%d")}'
                - ParameterName: JsonParsingEngine
                  ParameterValue: 'JQ-1.6'
        DataFormatConversionConfiguration:
          Enabled: false

  IAMRoleKinesisFirehose:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${Environment}-kinesis-txma-firehose-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: !Sub ${Environment}-kinesis-txma-firehose-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${RawLayerBucket}'
                  - !Sub 'arn:aws:s3:::${RawLayerBucket}/*'
              - Effect: Allow
                Resource: arn:aws:logs:*:*:*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents

  GlobalLogBucket:
    # checkov:skip=GDS_AWS_3: Check that all S3 buckets have corresponding bucket policies
    # checkov:skip=CKV_AWS_18: This is the log bucket for all other buckets - no need for a log bucket of the log bucket
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Sub '${Environment}-dap-s3-logs'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  GlueSecurityConfig:
    # checkov:skip=CKV_AWS_99: Ensure Glue Security Configuration Encryption is enabled
    Type: AWS::Glue::SecurityConfiguration
    Properties:
      Name: !Sub ${Environment}-dap-glue-security-config
      EncryptionConfiguration:
        CloudWatchEncryption:
          CloudWatchEncryptionMode: DISABLED
        JobBookmarksEncryption:
          JobBookmarksEncryptionMode: DISABLED
        S3Encryptions:
          - S3EncryptionMode: DISABLED

  TestSupportLambda:
    # checkov:skip=CKV_AWS_116: DLQ not needed for lambda driven by SQS
    # checkov:skip=CKV_AWS_117: VPC not needed for lambda
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub test-support-${Environment}
      Handler: test-support.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
            - Effect: Allow
              Action:
                - logs:FilterLogEvents
                - logs:GetLogEvents
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucket
              Resource: !Sub arn:aws:s3:::${AWS::StackName}*
            - Effect: Allow
              Action: sqs:SendMessage
              Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*
      ReservedConcurrentExecutions: 10
      Tags:
        Environment: !Ref Environment

  RawLayerBucket:
    # checkov:skip=GDS_AWS_3: Check that all S3 buckets have corresponding bucket policies
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Sub ${Environment}-dap-raw-layer
      LoggingConfiguration:
        DestinationBucketName: !Ref GlobalLogBucket
        LogFilePrefix: dap-raw-layer/log
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  RawGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub ${Environment}-raw-txma-datasets
      Role: !GetAtt RawGlueCrawlerRole.Arn
      Targets:
        S3Targets:
          - Path: !Sub 's3://${RawLayerBucket}/txma/AUTH_AUTHORISATION_INITIATED/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/AUTH_CREATE_ACCOUNT/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/DCMAW_APP_END/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/DCMAW_APP_HANDOFF_START/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/DCMAW_APP_START/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/DCMAW_CRI_START/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/DCMAW_DRIVING_LICENCE_SELECTED/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/DCMAW_PASSPORT_SELECTED/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/IPV_ADDRESS_CRI_START/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/IPV_ADDRESS_CRI_VC_ISSUED/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/IPV_FRAUD_CRI_START/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/IPV_IDENTITY_REUSE_COMPLETE/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/IPV_JOURNEY_END/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/IPV_JOURNEY_START/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/IPV_KBV_CRI_START/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/IPV_PASSPORT_CRI_START/'
          - Path: !Sub 's3://${RawLayerBucket}/txma/IPV_PASSPORT_CRI_VC_ISSUED/'
      DatabaseName: !Ref RawGlueDatabase
      CrawlerSecurityConfiguration: !Ref GlueSecurityConfig
      RecrawlPolicy:
        RecrawlBehavior: CRAWL_EVERYTHING
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: DELETE_FROM_DATABASE
      Configuration: '{"Version":1,"CrawlerOutput":{"Partitions":{"AddOrUpdateBehavior":"InheritFromTable"}}}'

  RawGlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}-raw-glue-crawler-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [glue.amazonaws.com]
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Path: /
      Policies:
        - PolicyName: !Sub ${Environment}-raw-glue-crawler-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'glue:GetConnection'
                  - 'glue:GetCrawler'
                  - 'glue:CreateTable'
                  - 'glue:UpdateCrawler'
                  - 'glue:CreatePartition'
                  - 'glue:BatchCreatePartition'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${RawLayerBucket}'
                  - !Sub 'arn:aws:s3:::${RawLayerBucket}/*'

  RawGlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Sub ${AWS::AccountId}
      DatabaseInput:
        Name: !Sub ${Environment}-${RawGlueDatabaseName}

  StageLayerBucket:
    # checkov:skip=GDS_AWS_3: Check that all S3 buckets have corresponding bucket policies
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Sub ${Environment}-dap-stage-layer
      LoggingConfiguration:
        DestinationBucketName: !Ref GlobalLogBucket
        LogFilePrefix: dap-stage-layer/log
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  StageGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub ${Environment}-stage-txma-datasets
      Role: !GetAtt StageGlueCrawlerRole.Arn
      Targets:
        S3Targets:
          - Path: !Sub 's3://${StageLayerBucket}/txma/AUTH_CREATE_ACCOUNT/'
          - Path: !Sub 's3://${StageLayerBucket}/txma/DCMAW_APP_START/'
      DatabaseName: !Ref StageGlueDatabase
      CrawlerSecurityConfiguration: !Ref GlueSecurityConfig
      RecrawlPolicy:
        RecrawlBehavior: CRAWL_EVERYTHING
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: DELETE_FROM_DATABASE
      Configuration: '{"Version":1,"CrawlerOutput":{"Partitions":{"AddOrUpdateBehavior":"InheritFromTable"}}}'

  StageGlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}-stage-glue-crawler-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [glue.amazonaws.com]
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Path: /
      Policies:
        - PolicyName: !Sub ${Environment}-stage-glue-crawler-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'glue:GetConnection'
                  - 'glue:GetCrawler'
                  - 'glue:CreateTable'
                  - 'glue:UpdateCrawler'
                  - 'glue:CreatePartition'
                  - 'glue:BatchCreatePartition'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${StageLayerBucket}'
                  - !Sub 'arn:aws:s3:::${StageLayerBucket}/*'

  StageGlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Sub ${AWS::AccountId}
      DatabaseInput:
        Name: !Sub ${Environment}-${StageGlueDatabaseName}

  ELTMetadataBucket:
    # checkov:skip=GDS_AWS_3: Check that all S3 buckets have corresponding bucket policies
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Sub ${Environment}-dap-elt-metadata
      LoggingConfiguration:
        DestinationBucketName: !Ref GlobalLogBucket
        LogFilePrefix: dap-elt-metadata/log
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  AthenaRawLayerProcessingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/athena_raw_layer_processing.asl.json
      Name: !Sub ${Environment}-dap-raw-to-stage-process
      Role: !GetAtt StepFunctionRole.Arn
      DefinitionSubstitutions:
        GetEventConfigFunctionArn: !GetAtt AthenaGetConfigLambda.Arn
        GetAthenaStatementFunctionArn: !GetAtt AthenaGetStatementLambda.Arn
        GlueCrawlerRawName: !Ref RawGlueCrawler
        GlueCrawlerStageName: !Ref StageGlueCrawler
        AthenaWorkGroupName: !Ref AthenaWorkGroup
        S3RawBucketName: !Ref RawLayerBucket
        S3StageBucketName: !Ref StageLayerBucket
        S3MetaDataBucketName: !Ref ELTMetadataBucket
      Events:
        DailySchedule:
          Type: Schedule # More info about Schedule Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-statemachine-schedule.html
          Properties:
            Enabled: false # This schedule is disabled by default to avoid incurring charges.
            Schedule: cron(0 7 * * ? *)

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}-dap-statemachine-processing-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${Environment}-dap-statemachine-processing-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: arn:aws:s3:::*
                Action:
                  - s3:Get*
                  - s3:Put*
                  - s3:List*
                  - s3:ListBucketMultipartUploads
                  - s3:AbortMultipartUpload
                  - s3:CreateBucket
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:ListMultipartUploadParts

              - Effect: Allow
                Resource: arn:aws:logs:*:*:*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups

              - Effect: Allow
                Resource: !Sub arn:aws:glue:*:${AWS::AccountId}:crawler/*
                Action:
                  - glue:GetCrawler
                  - glue:GetCrawlers
                  - glue:ListCrawlers
                  - glue:ListCrawler
                  - glue:StartCrawler
                  - glue:StartCrawlerSchedule

              - Effect: Allow
                Resource:
                  - !Join [':', [!GetAtt AthenaGetConfigLambda.Arn, '$LATEST']]
                  - !Join [':', [!GetAtt AthenaGetStatementLambda.Arn, '$LATEST']]
                Action: lambda:InvokeFunction

              - Effect: Allow
                Resource: !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Environment}-dap-raw-to-stage-process'
                Action: states:ListExecutions

              - Effect: Allow
                Resource: '*'
                Action:
                  - athena:GetTableMetadata
                  - athena:ListEngineVersions
                  - athena:ListDataCatalogs
                  - athena:ListDatabases
                  - athena:GetDatabase
                  - athena:ListTableMetadata
                  - athena:ListWorkGroups

              - Effect: Allow
                Resource:
                  - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/dap-txma-processing'
                  - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/*'
                Action:
                  - athena:CreatePreparedStatement
                  - athena:StartQueryExecution
                  - athena:GetQueryResultsStream
                  - athena:UpdatePreparedStatement
                  - athena:GetQueryResults
                  - athena:DeletePreparedStatement
                  - athena:DeleteNamedQuery
                  - athena:GetNamedQuery
                  - athena:GetPreparedStatement
                  - athena:ListQueryExecutions
                  - athena:ListNamedQueries
                  - athena:GetWorkGroup
                  - athena:CreateNamedQuery
                  - athena:StopQueryExecution
                  - athena:GetQueryExecution
                  - athena:BatchGetNamedQuery
                  - athena:ListPreparedStatements
                  - athena:BatchGetQueryExecution
                  - athena:getDataCatalog

              - Effect: Allow
                Resource:
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog'
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/*'
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/*'
                Action:
                  - glue:CreateDatabase
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:UpdateDatabase
                  - glue:DeleteDatabase
                  - glue:CreateTable
                  - glue:UpdateTable
                  - glue:GetTable
                  - glue:GetTables
                  - glue:DeleteTable
                  - glue:BatchDeleteTable
                  - glue:BatchCreatePartition
                  - glue:CreatePartition
                  - glue:UpdatePartition
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:BatchGetPartition
                  - glue:DeletePartition
                  - glue:BatchDeletePartition
