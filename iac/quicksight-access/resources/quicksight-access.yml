QuicksightAccessLambdaFunction:
  # checkov:skip=CKV_AWS_116: DLQ not needed as credentials would be out of date when retried
  Type: AWS::Serverless::Function
  Condition: IsQuicksightEnvironment
  Properties:
    FunctionName: cognito-quicksight-access
    Handler: cognito-quicksight-access.handler
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action: quicksight:GenerateEmbedUrlForRegisteredUser
            Resource: '*'
    ReservedConcurrentExecutions: 10
    Environment:
      # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
      Variables:
        ENVIRONMENT: !Ref Environment
        COGNITO_CLIENT_ID: !Ref QuicksightAccessUserPoolClient
        COGNITO_DOMAIN: !Sub https://${QuicksightAccessUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
    Tags:
      Environment: !Ref Environment
    MemorySize: 512
    # this lambda lives in the protected subnets of a different VPC than the main application lambdas
    # because it needs (limited) internet access to call cognito and quicksight APIs and these services do not have VPC endpoints
    # see https://govukverify.atlassian.net/wiki/spaces/PLAT/pages/3531735041/VPC
    VpcConfig:
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${Environment}-dap-vpc-AWSServicesEndpointSecurityGroupId
      SubnetIds:
        - Fn::ImportValue: !Sub ${Environment}-dap-vpc-ProtectedSubnetIdA
        - Fn::ImportValue: !Sub ${Environment}-dap-vpc-ProtectedSubnetIdB
        - Fn::ImportValue: !Sub ${Environment}-dap-vpc-ProtectedSubnetIdC

QuicksightAccessApiGateway:
  Type: AWS::ApiGatewayV2::Api
  Condition: IsQuicksightEnvironment
  Properties:
    Name: !Sub ${Environment}-dap-quicksight-access
    ProtocolType: HTTP

QuicksightAccessApiGatewayStage:
  Type: AWS::ApiGatewayV2::Stage
  Condition: IsQuicksightEnvironment
  Properties:
    ApiId: !Ref QuicksightAccessApiGateway
    StageName: ${Environment}-stage
    AutoDeploy: true
    AccessLogSettings:
      DestinationArn: !GetAtt QuicksightAccessLogGroup.Arn
      Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'

QuicksightAccessApiGatewayLambdaPermission:
  Type: AWS::Lambda::Permission
  Condition: IsQuicksightEnvironment
  Properties:
    FunctionName: !Ref QuicksightAccessLambdaFunction
    Action: lambda:InvokeFunction
    Principal: apigateway.amazonaws.com
    SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QuicksightAccessApiGateway}/*/${Environment}-stage

# todo maybe add DeletionProtection
QuicksightAccessUserPool:
  Type: AWS::Cognito::UserPool
  Condition: IsQuicksightEnvironment
  Properties:
    AccountRecoverySetting:
      RecoveryMechanisms:
        - Name: verified_email
          Priority: 1
    AdminCreateUserConfig:
      AllowAdminCreateUserOnly: true
      InviteMessageTemplate:
        EmailMessage: <invitation-email> # replaced with a template from ../templates during iac:build and iac:buildall
        EmailSubject: Welcome to One Login Data & Analytics Dashboards
    AutoVerifiedAttributes:
      - email
    EmailConfiguration:
      EmailSendingAccount: !If [IsDevOrProd, DEVELOPER, COGNITO_DEFAULT]
      From: !If
        - IsDevOrProd
        - !Sub
          - 'Data & Analytics One Login <noreply@${Domain}>'
          - Domain: !If [IsDev, dap.dev.account.gov.uk, dap.account.gov.uk]
        - !Ref 'AWS::NoValue'
      SourceArn: !If
        - IsDevOrProd
        - !Sub
          - arn:aws:ses:eu-west-2:${AWS::AccountId}:identity/${Domain}
          - Domain: !If [IsDev, dap.dev.account.gov.uk, dap.account.gov.uk]
        - !Ref 'AWS::NoValue'
    EnabledMfas:
      - SOFTWARE_TOKEN_MFA
    MfaConfiguration: 'ON'
    UserAttributeUpdateSettings:
      AttributesRequireVerificationBeforeUpdate:
        - email
    UserPoolName: !Sub ${Environment}-dap-quicksight-access-pool
    VerificationMessageTemplate:
      DefaultEmailOption: CONFIRM_WITH_CODE
      EmailMessage: <verification-email> # replaced with a template from ../templates during iac:build and iac:buildall
      EmailSubject: Verification Code for One Login Data & Analytics Dashboards

QuicksightAccessLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: !Sub /aws/apigateway/${Environment}-dap-quicksight-access
    RetentionInDays: 180
    KmsKeyId: !If
      - IsProduction
      - !GetAtt WAFLoggingKmsKey.Arn
      - !Ref AWS::NoValue

# QuicksightAccessApiGatewayStage:
#   Type: AWS::ApiGatewayV2::Stage
#   Properties:
#     ApiId: !Ref QuicksightAccessApiGateway
#     StageName: '$default'
#     AutoDeploy: true
#     AccessLogSettings:
#       DestinationArn: !GetAtt QuicksightAccessLogGroup.Arn
#       Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'

QuicksightAccessUserPoolClient:
  Type: AWS::Cognito::UserPoolClient
  Condition: IsQuicksightEnvironment
  Properties:
    AllowedOAuthFlows:
      - code
    AllowedOAuthFlowsUserPoolClient: true
    AllowedOAuthScopes:
      - email
      - openid
      - profile
    CallbackURLs:
      - !GetAtt QuicksightAccessApiGateway.ApiEndpoint
    ClientName: !Sub ${Environment}-dap-quicksight-access-client
    ExplicitAuthFlows:
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_SRP_AUTH
    ReadAttributes:
      - email
      - email_verified
      - sub
    SupportedIdentityProviders:
      - COGNITO
    UserPoolId: !Ref QuicksightAccessUserPool

QuicksightAccessUserPoolDomain:
  Type: AWS::Cognito::UserPoolDomain
  Condition: IsQuicksightEnvironment
  Properties:
    Domain: !Sub ${Environment}-dap-quicksight-access
    UserPoolId: !Ref QuicksightAccessUserPool

QuicksightAddUsersLambdaFunction:
  # checkov:skip=CKV_AWS_116: DLQ not needed as this is a manually invoked action
  Type: AWS::Serverless::Function
  Condition: IsQuicksightEnvironment
  Properties:
    FunctionName: quicksight-add-users
    Handler: quicksight-add-users.handler
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminGetUser
            Resource: !GetAtt QuicksightAccessUserPool.Arn
          - Effect: Allow
            Action:
              - quicksight:CreateGroupMembership
              - quicksight:DescribeUser
              - quicksight:ListUserGroups
              - quicksight:RegisterUser
            Resource: '*'
    ReservedConcurrentExecutions: 10
    Environment:
      # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
      Variables:
        ENVIRONMENT: !Ref Environment
        USER_POOL_ID: !Ref QuicksightAccessUserPool
    Tags:
      Environment: !Ref Environment
    MemorySize: 512
    # this lambda lives in the protected subnets of a different VPC than the main application lambdas
    # because it needs (limited) internet access to call cognito and quicksight APIs and these services do not have VPC endpoints
    # see https://govukverify.atlassian.net/wiki/spaces/PLAT/pages/3531735041/VPC
    VpcConfig:
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${Environment}-dap-vpc-AWSServicesEndpointSecurityGroupId
      SubnetIds:
        - Fn::ImportValue: !Sub ${Environment}-dap-vpc-ProtectedSubnetIdA
        - Fn::ImportValue: !Sub ${Environment}-dap-vpc-ProtectedSubnetIdB
        - Fn::ImportValue: !Sub ${Environment}-dap-vpc-ProtectedSubnetIdC

QuicksightAddUsersFromSpreadsheetLambdaFunction:
  # checkov:skip=CKV_AWS_116: DLQ not needed as this is a manually invoked action
  Type: AWS::Serverless::Function
  Condition: IsQuicksightEnvironment
  Properties:
    FunctionName: quicksight-add-users-from-spreadsheet
    Handler: quicksight-add-users-from-spreadsheet.handler
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !GetAtt QuicksightAddUsersLambdaFunction.Arn
          - Effect: Allow
            Action: cognito-idp:AdminGetUser
            Resource: !GetAtt QuicksightAccessUserPool.Arn
          - Effect: Allow
            Action:
              - quicksight:DescribeUser
              - quicksight:ListUserGroups
            Resource: '*'
    ReservedConcurrentExecutions: 10
    Environment:
      # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
      Variables:
        ENVIRONMENT: !Ref Environment
        USER_POOL_ID: !Ref QuicksightAccessUserPool
    Tags:
      Environment: !Ref Environment
    MemorySize: 512
    # this lambda lives in the protected subnets of a different VPC than the main application lambdas
    # because it needs (limited) internet access to call cognito and quicksight APIs and these services do not have VPC endpoints
    # it also needs to invoke the quicksight-add-users lambda and must be in this VPC to use the lambda VPC endpoint
    # see https://govukverify.atlassian.net/wiki/spaces/PLAT/pages/3531735041/VPC
    VpcConfig:
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${Environment}-dap-vpc-AWSServicesEndpointSecurityGroupId
      SubnetIds:
        - Fn::ImportValue: !Sub ${Environment}-dap-vpc-ProtectedSubnetIdA
        - Fn::ImportValue: !Sub ${Environment}-dap-vpc-ProtectedSubnetIdB
        - Fn::ImportValue: !Sub ${Environment}-dap-vpc-ProtectedSubnetIdC

# Role to allow invoking the two quicksight add users lambdas (quicksight-add-users and quicksight-add-users-from-spreadsheet) from GitHub Actions
QuicksightAddUsersLambdasInvokeRole:
  Type: AWS::IAM::Role
  Condition: IsQuicksightEnvironment
  Properties:
    RoleName: !Sub ${Environment}-dap-quicksight-add-users-lambdas-invoke-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Federated: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com
          Action: 'sts:AssumeRoleWithWebIdentity'
          Condition:
            StringLike:
              'token.actions.githubusercontent.com:sub':
                - repo:govuk-one-login/data-analytics-platform:ref:refs/heads/*
                - repo:govuk-one-login/data-analytics-platform:environment:*
    Policies:
      - PolicyName: !Sub ${Environment}-dap-quicksight-add-users-invoke-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt QuicksightAddUsersLambdaFunction.Arn
                - !GetAtt QuicksightAddUsersFromSpreadsheetLambdaFunction.Arn

webAcl:
  Type: 'AWS::WAFv2::WebACL'
  Condition: IsQuicksightEnvironment
  Properties:
    Description: Web ACL
    DefaultAction:
      Allow: {}

    Rules:
      - Name: AWS-CRS
        Priority: 0
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesCommonRuleSet
            ExcludedRules:
              - Name: CrossSiteScripting_BODY
              - Name: CrossSiteScripting_COOKIE
              - Name: CrossSiteScripting_QUERYARGUMENTS
              - Name: CrossSiteScripting_URIPATH
              - Name: EC2MetaDataSSRF_BODY
              - Name: EC2MetaDataSSRF_COOKIE
              - Name: EC2MetaDataSSRF_QUERYARGUMENTS
              - Name: EC2MetaDataSSRF_URIPATH
              - Name: GenericLFI_BODY
              - Name: GenericLFI_QUERYARGUMENTS
              - Name: GenericLFI_URIPATH
              - Name: GenericRFI_BODY
              - Name: GenericRFI_QUERYARGUMENTS
              - Name: GenericRFI_URIPATH
              - Name: NoUserAgent_HEADER
              - Name: RestrictedExtensions_QUERYARGUMENTS
              - Name: RestrictedExtensions_URIPATH
              - Name: SizeRestrictions_BODY
              - Name: SizeRestrictions_Cookie_HEADER
              - Name: SizeRestrictions_QUERYSTRING
              - Name: SizeRestrictions_URIPATH
              - Name: UserAgent_BadBots_HEADER
        OverrideAction:
          None: {}
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: !Sub '${Environment}-dap-aws-crs-metric'

      - Name: Bad-Inputs
        #checkov:skip=CKV_AWS_192:log4j is needed
        Priority: 1
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesKnownBadInputsRuleSet
            ExcludedRules:
              - Name: ExploitablePaths_URIPATH
              - Name: Host_localhost_HEADER
              - Name: JavaDeserializationRCE_BODY
              - Name: JavaDeserializationRCE_HEADER
              - Name: JavaDeserializationRCE_QUERYSTRING
              - Name: JavaDeserializationRCE_URIPATH
              - Name: Log4JRCE
              - Name: PROPFIND_METHOD
        OverrideAction:
          None: {}
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: !Sub '${Environment}-dap-bad-inputs-metric'

      - Name: Anonymous-IpList
        Priority: 2
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesAnonymousIpList
            ExcludedRules:
              - Name: AnonymousIPList
              - Name: HostingProviderIPList
        OverrideAction:
          None: {}
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: !Sub '${Environment}-dap-anonymous-iplist-metric'

      - Name: SQLInject-RuleSet
        Priority: 3
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesSQLiRuleSet
            ExcludedRules:
              - Name: SQLiExtendedPatterns_QUERYARGUMENTS
              - Name: SQLi_BODY
              - Name: SQLi_COOKIE
              - Name: SQLi_QUERYARGUMENTS
              - Name: SQLi_URIPATH
        OverrideAction:
          None: {}
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: !Sub '${Environment}-dap-SQLinjection-ruleset-metric'

      - Name: RateBased-CountIpRule
        Priority: 4
        Statement:
          RateBasedStatement:
            Limit: 100
            AggregateKeyType: IP
        Action:
          Count: {}
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          SampledRequestsEnabled: true
          MetricName: !Sub '${Environment}-dap-RateBased-CountIp-ruleset-metric'

    Scope: REGIONAL
    Tags:
      - Key: Name
        Value: !Sub '${Environment}-dap'
    VisibilityConfig:
      SampledRequestsEnabled: true
      CloudWatchMetricsEnabled: true
      MetricName: !Sub '${Environment}-dap-metric'

cloudwatchLogsGroup:
  Type: 'AWS::Logs::LogGroup'
  Condition: IsQuicksightEnvironment
  Properties:
    LogGroupName: !Sub 'aws-waf-logs-${Environment}-dap-cloudWatchLog'
    RetentionInDays: 180
    KmsKeyId: !If
      - IsProduction
      - !GetAtt WAFLoggingKmsKey.Arn
      - !Ref AWS::NoValue

WebAclAssociation:
  Type: 'AWS::WAFv2::WebACLAssociation'
  Condition: IsQuicksightEnvironment
  Properties:
    ResourceArn: !GetAtt QuicksightAccessUserPool.Arn
    WebACLArn: !GetAtt webAcl.Arn

webAcllogging:
  Type: 'AWS::WAFv2::LoggingConfiguration'
  Condition: IsQuicksightEnvironment
  Properties:
    ResourceArn: !GetAtt webAcl.Arn
    LogDestinationConfigs:
      - !GetAtt cloudwatchLogsGroup.Arn
    LoggingFilter:
      DefaultBehavior: KEEP
      Filters:
        - Behavior: KEEP
          Conditions:
            - ActionCondition:
                Action: BLOCK
            - ActionCondition:
                Action: COUNT
          Requirement: MEETS_ANY
    RedactedFields:
      - SingleHeader:
          Name: password

WafAclSSM:
  Type: AWS::SSM::Parameter
  Condition: IsQuicksightEnvironment
  Properties:
    Description: The ARN of webACL
    Name: !Sub '/${Environment}/dap/Security/WafArn'
    Type: String
    Value: !GetAtt
      - webAcl
      - Arn

WAFLoggingKmsKey:
  Type: AWS::KMS::Key
  Condition: IsQuicksightEnvironment
  Properties:
    EnableKeyRotation: true
    KeyPolicy:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action:
            - kms:*
          Resource: '*'
        - Effect: Allow
          Principal:
            Service: !Sub 'logs.${AWS::Region}.amazonaws.com'
          Action:
            - 'kms:Encrypt*'
            - 'kms:Decrypt*'
            - 'kms:ReEncrypt*'
            - 'kms:GenerateDataKey*'
            - 'kms:Describe*'
          Resource: '*'
          Condition:
            ArnLike:
              'kms:EncryptionContext:aws:logs:arn': !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
