GlobalLogBucket:
  # checkov:skip=CKV_AWS_18: This is the log bucket for all other buckets - no need for a log bucket of the log bucket
  Type: 'AWS::S3::Bucket'
  Properties:
    AccessControl: Private
    BucketName: !Sub '${Environment}-dap-s3-logs'
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
    VersioningConfiguration:
      Status: Enabled

GlobalLogBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref GlobalLogBucket
    PolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Deny
          Action: 's3:*'
          Resource: !Sub ${GlobalLogBucket.Arn}/*
          Principal: '*'
          Condition:
            Bool:
              aws:SecureTransport: false
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource: !Sub ${GlobalLogBucket.Arn}/*
          Principal: '*'

GlueSecurityConfig:
  Type: AWS::Glue::SecurityConfiguration
  Properties:
    Name: !Sub ${Environment}-dap-glue-security-configuration
    EncryptionConfiguration:
      CloudWatchEncryption:
        CloudWatchEncryptionMode: SSE-KMS
        KmsKeyArn: !GetAtt KmsKey.Arn
      JobBookmarksEncryption:
        JobBookmarksEncryptionMode: CSE-KMS
        KmsKeyArn: !GetAtt KmsKey.Arn
      S3Encryptions:
        - S3EncryptionMode: SSE-KMS
          KmsKeyArn: !GetAtt KmsKey.Arn

TestSupportLambda:
  # checkov:skip=CKV_AWS_116: DLQ not needed for lambda driven by SQS
  # checkov:skip=CKV_AWS_117: VPC not needed for lambda
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: !Sub test-support-${Environment}
    Handler: test-support.handler
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
          - Effect: Allow
            Action:
              - logs:FilterLogEvents
              - logs:GetLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
            Resource: !Sub arn:aws:s3:::${Environment}-dap*
          - Effect: Allow
            Action: sqs:SendMessage
            Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:Encrypt
            Resource: !GetAtt KmsKey.Arn
    ReservedConcurrentExecutions: 10
    Tags:
      Environment: !Ref Environment

KmsKey:
  Type: AWS::KMS::Key
  Properties:
    EnableKeyRotation: true
    KeyPolicy:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
          Action: kms:*
          Resource: '*'
        - Effect: Allow
          Principal:
            Service:
              - cloudwatch.amazonaws.com
              - lambda.amazonaws.com
              - s3.amazonaws.com
              - sns.amazonaws.com
              - sqs.amazonaws.com
              - logs.amazonaws.com
              - logs.eu-west-2.amazonaws.com
              - glue.amazonaws.com
              - redshift.amazonaws.com
              - redshift-serverless.amazonaws.com
            AWS:
              - !GetAtt RawGlueCrawlerRole.Arn
              - !GetAtt StageGlueCrawlerRole.Arn
              - !GetAtt StepFunctionRole.Arn
              - !GetAtt GlueScriptsExecutionRole.Arn
          Action:
            - kms:Encrypt*
            - kms:Decrypt*
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:Describe*
          Resource: '*'

KmsKeyAlias:
  Type: AWS::KMS::Alias
  Properties:
    AliasName: !Sub alias/${Environment}-dap-key
    TargetKeyId: !Ref KmsKey
