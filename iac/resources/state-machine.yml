ELTMetadataBucket:
  # checkov:skip=GDS_AWS_3: Check that all S3 buckets have corresponding bucket policies
  Type: 'AWS::S3::Bucket'
  Properties:
    AccessControl: Private
    BucketName: !Sub ${Environment}-dap-elt-metadata
    LoggingConfiguration:
      DestinationBucketName: !Ref GlobalLogBucket
      LogFilePrefix: dap-elt-metadata/log
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
    VersioningConfiguration:
      Status: Enabled

AthenaRawLayerProcessingStateMachine:
  Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
  Properties:
    DefinitionUri: statemachine/athena_raw_layer_processing.asl.json
    Name: !Sub ${Environment}-dap-raw-to-stage-process
    Role: !GetAtt StepFunctionRole.Arn
    DefinitionSubstitutions:
      GetEventConfigFunctionArn: !GetAtt AthenaGetConfigLambda.Arn
      GetAthenaStatementFunctionArn: !GetAtt AthenaGetStatementLambda.Arn
      GlueCrawlerStageName: !Ref StageGlueCrawler
      AthenaWorkGroupName: !Ref AthenaWorkGroup
      S3RawBucketName: !Ref RawLayerBucket
      S3StageBucketName: !Ref StageLayerBucket
      S3MetaDataBucketName: !Ref ELTMetadataBucket
      RawDatabaseName: !Ref RawGlueDatabase
    Events:
      DailySchedule:
        Type: Schedule # More info about Schedule Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-statemachine-schedule.html
        Properties:
          Enabled: false # This schedule is disabled by default to avoid incurring charges.
          Schedule: cron(0 7 * * ? *)

StepFunctionRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: !Sub ${Environment}-dap-statemachine-processing-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - states.amazonaws.com
          Action:
            - sts:AssumeRole
    Path: /
    Policies:
      - PolicyName: !Sub ${Environment}-dap-statemachine-processing-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Resource: arn:aws:s3:::*
              Action:
                - s3:Get*
                - s3:Put*
                - s3:List*
                - s3:ListBucketMultipartUploads
                - s3:AbortMultipartUpload
                - s3:CreateBucket
                - s3:ListBucket
                - s3:GetBucketLocation
                - s3:ListMultipartUploadParts

            - Effect: Allow
              Resource: arn:aws:logs:*:*:*
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups

            - Effect: Allow
              Resource: !Sub arn:aws:glue:*:${AWS::AccountId}:crawler/*
              Action:
                - glue:GetCrawler
                - glue:GetCrawlers
                - glue:ListCrawlers
                - glue:ListCrawler
                - glue:StartCrawler
                - glue:StartCrawlerSchedule

            - Effect: Allow
              Resource:
                - !Join [':', [!GetAtt AthenaGetConfigLambda.Arn, '$LATEST']]
                - !Join [':', [!GetAtt AthenaGetStatementLambda.Arn, '$LATEST']]
              Action: lambda:InvokeFunction

            - Effect: Allow
              Resource: !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Environment}-dap-raw-to-stage-process'
              Action: states:ListExecutions

            - Effect: Allow
              Resource: '*'
              Action:
                - athena:GetTableMetadata
                - athena:ListEngineVersions
                - athena:ListDataCatalogs
                - athena:ListDatabases
                - athena:GetDatabase
                - athena:ListTableMetadata
                - athena:ListWorkGroups

            - Effect: Allow
              Resource:
                - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${Environment}-dap-txma-processing'
                - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/*'
              Action:
                - athena:CreatePreparedStatement
                - athena:StartQueryExecution
                - athena:GetQueryResultsStream
                - athena:UpdatePreparedStatement
                - athena:GetQueryResults
                - athena:DeletePreparedStatement
                - athena:DeleteNamedQuery
                - athena:GetNamedQuery
                - athena:GetPreparedStatement
                - athena:ListQueryExecutions
                - athena:ListNamedQueries
                - athena:GetWorkGroup
                - athena:CreateNamedQuery
                - athena:StopQueryExecution
                - athena:GetQueryExecution
                - athena:BatchGetNamedQuery
                - athena:ListPreparedStatements
                - athena:BatchGetQueryExecution
                - athena:getDataCatalog

            - Effect: Allow
              Resource:
                - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog'
                - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/*'
                - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/*'
              Action:
                - glue:CreateDatabase
                - glue:GetDatabase
                - glue:GetDatabases
                - glue:UpdateDatabase
                - glue:DeleteDatabase
                - glue:CreateTable
                - glue:UpdateTable
                - glue:GetTable
                - glue:GetTables
                - glue:DeleteTable
                - glue:BatchDeleteTable
                - glue:BatchCreatePartition
                - glue:CreatePartition
                - glue:UpdatePartition
                - glue:GetPartition
                - glue:GetPartitions
                - glue:BatchGetPartition
                - glue:DeletePartition
                - glue:BatchDeletePartition
