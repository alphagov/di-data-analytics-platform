IAMRoleRedshiftServerless:
  Type: 'AWS::IAM::Role'
  Properties:
    RoleName: !Sub ${Environment}-redshift-serverless-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Service:
              [firehose.amazonaws.com, redshift.amazonaws.com, glue.amazonaws.com, redshift-serverless.amazonaws.com]
          Action: 'sts:AssumeRole'
    MaxSessionDuration: 3600
    Policies:
      - PolicyName: !Sub ${Environment}-redshift-serverless-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 's3:AbortMultipartUpload'
                - 's3:GetBucketLocation'
                - 's3:GetObject'
                - 's3:ListBucket'
                - 's3:ListBucketMultipartUploads'
                - 's3:PutObject'
              Resource:
                - !Sub 'arn:aws:s3:::${RawLayerBucket}'
                - !Sub 'arn:aws:s3:::${RawLayerBucket}/*'
                - !Sub 'arn:aws:s3:::${StageLayerBucket}'
                - !Sub 'arn:aws:s3:::${StageLayerBucket}/*'
            - Effect: Allow
              Resource: !Sub arn:aws:glue:eu-west-2:${AWS::AccountId}:*
              Action:
                - 'glue:GetTable'
                - 'glue:GetTables'
                - 'glue:GetDatabase'
                - 'glue:GetDatabases'
                - 'glue:GetPartitions'

MyRedshiftSecret:
  Type: 'AWS::SecretsManager::Secret'
  Properties:
    Description: This is a Secrets Manager secret for a Redshift cluster
    GenerateSecretString:
      SecretStringTemplate: '{"username": "admin"}'
      GenerateStringKey: password
      PasswordLength: 16
      ExcludeCharacters: '"''@/\'
    KmsKeyId: !Ref KmsKey

RedshiftServerlessNamespace:
  Type: 'AWS::RedshiftServerless::Namespace'
  Properties:
    AdminUsername: !Sub '{{resolve:secretsmanager:${MyRedshiftSecret}::username}}'
    AdminUserPassword: !Sub '{{resolve:secretsmanager:${MyRedshiftSecret}::password}}'
    DbName: !Sub '${Environment}-redshift'
    DefaultIamRoleArn: !GetAtt IAMRoleRedshiftServerless.Arn
    IamRoles:
      - !GetAtt IAMRoleRedshiftServerless.Arn
    FinalSnapshotName: !Sub '${Environment}-redshift-snapshot'
    FinalSnapshotRetentionPeriod: 30
    LogExports:
      - useractivitylog
    NamespaceName: !Sub '${Environment}-redshift-serverless-ns'

RedshiftServerlessWorkgroup:
  Type: 'AWS::RedshiftServerless::Workgroup'
  Properties:
    BaseCapacity: 64
    EnhancedVpcRouting: false
    NamespaceName: !Ref RedshiftServerlessNamespace
    Port: 5439
    PubliclyAccessible: false
    SubnetIds:
      - !Ref SubnetForDAP1
      - !Ref SubnetForDAP2
      - !Ref SubnetForDAP3
    WorkgroupName: !Sub '${Environment}-redshift-serverless-workgroup'

RedshiftAccessEC2InstanceProfile:
  Type: AWS::IAM::InstanceProfile
  Properties:
    InstanceProfileName: !Sub ${Environment}-dap-redshift-access-server-instance-profile
    Roles:
      - !Ref RedshiftAccessEC2Role

RedshiftAccessEC2SecurityGroup:
  Type: 'AWS::EC2::SecurityGroup'
  Properties:
    GroupDescription: 'Security Group for Redshift Access EC2'
    VpcId: !Ref VPCForDAP
    SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
        Description: Allow egress to anywhere

VPCDefaultSecurityGroupRedshiftIngress:
  Type: AWS::EC2::SecurityGroupIngress
  Properties:
    GroupId: !GetAtt VPCForDAP.DefaultSecurityGroup
    IpProtocol: tcp
    FromPort: 5439
    ToPort: 5439
    SourceSecurityGroupId: !Ref RedshiftAccessEC2SecurityGroup
    Description: Allow ingress into the VPC default security group for redshift traffic from the redshift access security group

RedshiftAccessEC2LaunchTemplate:
  Type: 'AWS::EC2::LaunchTemplate'
  Properties:
    LaunchTemplateName: RedshiftAccessEC2LaunchTemplate
    LaunchTemplateData:
      ImageId: 'ami-0ab07a60473831856'
      InstanceType: 't2.nano'
      IamInstanceProfile:
        Arn: !GetAtt RedshiftAccessEC2InstanceProfile.Arn
      SecurityGroupIds:
        - !Ref RedshiftAccessEC2SecurityGroup
      MetadataOptions:
        HttpTokens: 'required'
        HttpPutResponseHopLimit: 1
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64

RedshiftAccessEC2:
  Type: 'AWS::EC2::Instance'
  Properties:
    LaunchTemplate:
      LaunchTemplateName: RedshiftAccessEC2LaunchTemplate
      Version: !GetAtt RedshiftAccessEC2LaunchTemplate.LatestVersionNumber
    SubnetId: !Ref SubnetForDAP1

RedshiftAccessEC2Role:
  Type: AWS::IAM::Role
  Properties:
    RoleName: !Sub ${Environment}-dap-redshift-access-server-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

RedshiftMigrationRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: !Sub ${Environment}-dap-redshift-migrate-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Federated: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com
          Action: 'sts:AssumeRoleWithWebIdentity'
          Condition:
            StringLike:
              'token.actions.githubusercontent.com:sub':
                - repo:govuk-one-login/data-analytics-platform:ref:refs/heads/*
                - repo:govuk-one-login/data-analytics-platform:environment:*
    Policies:
      - PolicyName: !Sub ${Environment}-dap-redshift-migrate-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:ListSecrets
              Resource: '*'
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref MyRedshiftSecret
            - Effect: Allow
              Action: redshift-serverless:GetWorkgroup
              Resource: !GetAtt RedshiftServerlessWorkgroup.Workgroup.WorkgroupArn
            - Effect: Allow
              Action: kms:Decrypt
              Resource: !GetAtt KmsKey.Arn
            - Effect: Allow
              Action: ssm:StartSession
              Resource:
                - arn:aws:ssm:eu-west-2::document/AWS-StartPortForwardingSessionToRemoteHost
                - !Sub arn:aws:ec2:eu-west-2:${AWS::AccountId}:instance/${RedshiftAccessEC2}
            - Effect: Allow
              Action: ec2:DescribeInstances
              Resource: '*'
