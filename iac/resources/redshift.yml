IAMRoleRedshiftServerless:
  Type: 'AWS::IAM::Role'
  Properties:
    RoleName: !Sub ${Environment}-redshift-serverless-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Service:
              [firehose.amazonaws.com, redshift.amazonaws.com, glue.amazonaws.com, redshift-serverless.amazonaws.com]
          Action: 'sts:AssumeRole'
    MaxSessionDuration: 3600
    Policies:
      - PolicyName: !Sub ${Environment}-redshift-serverless-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 's3:AbortMultipartUpload'
                - 's3:GetBucketLocation'
                - 's3:GetObject'
                - 's3:ListBucket'
                - 's3:ListBucketMultipartUploads'
                - 's3:PutObject'
              Resource:
                - !Sub 'arn:aws:s3:::${RawLayerBucket}'
                - !Sub 'arn:aws:s3:::${RawLayerBucket}/*'
                - !Sub 'arn:aws:s3:::${StageLayerBucket}'
                - !Sub 'arn:aws:s3:::${StageLayerBucket}/*'
            - Effect: Allow
              Resource: !Sub arn:aws:glue:eu-west-2:${AWS::AccountId}:*
              Action:
                - 'glue:GetTable'
                - 'glue:GetTables'
                - 'glue:GetDatabase'
                - 'glue:GetDatabases'
                - 'glue:GetPartitions'

MyRedshiftSecret:
  Type: 'AWS::SecretsManager::Secret'
  Properties:
    Description: This is a Secrets Manager secret for a Redshift cluster
    GenerateSecretString:
      SecretStringTemplate: '{"username": "admin"}'
      GenerateStringKey: password
      PasswordLength: 16
      ExcludeCharacters: '"''@/\'
    KmsKeyId: !Ref KmsKey

RedshiftServerlessNamespace:
  Type: 'AWS::RedshiftServerless::Namespace'
  Properties:
    AdminUsername: !Sub '{{resolve:secretsmanager:${MyRedshiftSecret}::username}}'
    AdminUserPassword: !Sub '{{resolve:secretsmanager:${MyRedshiftSecret}::password}}'
    DbName: !Sub '${Environment}-redshift'
    DefaultIamRoleArn: !GetAtt IAMRoleRedshiftServerless.Arn
    IamRoles:
      - !GetAtt IAMRoleRedshiftServerless.Arn
    FinalSnapshotName: !Sub '${Environment}-redshift-snapshot'
    FinalSnapshotRetentionPeriod: 30
    LogExports:
      - useractivitylog
    NamespaceName: !Sub '${Environment}-redshift-serverless-ns'

RedshiftServerlessWorkgroup:
  Type: 'AWS::RedshiftServerless::Workgroup'
  Properties:
    BaseCapacity: 128
    EnhancedVpcRouting: false
    NamespaceName: !Ref RedshiftServerlessNamespace
    Port: 5439
    PubliclyAccessible: false
    SubnetIds:
      - !Ref SubnetForDAP1
      - !Ref SubnetForDAP2
      - !Ref SubnetForDAP3
    WorkgroupName: !Sub '${Environment}-redshift-serverless-workgroup'

RedshiftAccessEC2:
  Type: AWS::EC2::Instance
  Properties:
    ImageId: ami-0eb260c4d5475b901 # Ubuntu Server 22.04 LTS
    InstanceType: t2.nano
    SubnetId: !Ref SubnetForDAP1
    IamInstanceProfile: !Ref RedshiftAccessEC2InstanceProfile
    BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 64
    Tags:
      - Key: Name
        Value: !Sub ${Environment}-dap-redshift-access-server

RedshiftAccessEC2InstanceProfile:
  Type: AWS::IAM::InstanceProfile
  Properties:
    InstanceProfileName: !Sub ${Environment}-dap-redshift-access-server-instance-profile
    Roles:
      - !Ref RedshiftAccessEC2Role

RedshiftAccessEC2Role:
  Type: AWS::IAM::Role
  Properties:
    RoleName: !Sub ${Environment}-dap-redshift-access-server-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
LambdaExecutionRole:
  Type: 'AWS::IAM::Role'
  Properties:
    RoleName: 'LambdaExecutionRole'
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: 'Allow'
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'
    Policies:
      - PolicyName: 'LambdaBasicExecution'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: 'arn:aws:logs:*:*:*'
            # checkov:skip=CKV_AWS_111: Skipping until the resource ARN is known
            - Effect: 'Allow'
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: '*'

RedshiftBackup:
  # checkov:skip=CKV_AWS_116: DLQ not needed as this lambda failing will cause state machine to fail
  Type: AWS::Lambda::Function
  Properties:
    Handler: index.handler
    Role: !GetAtt [LambdaExecutionRole, Arn]
    FunctionName: RedshiftBackup
    Code:
      ZipFile: |
        import boto3
        import datetime

        current_date = datetime.datetime.now().strftime('%Y-%m-%d')
        client = boto3.client('redshift-serverless')
        response = client.create_snapshot(
        namespaceName='test-redshift-serverless-ns',
        retentionPeriod=30,
        snapshotName='testsnap11-'+ current_date, 
        tags=[
        {
            'key': 'name',
            'value': 'test'
        },
        ]
        )
    Runtime: python3.8
    ReservedConcurrentExecutions: 10
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref SubnetForDAP1
        - !Ref SubnetForDAP2
        - !Ref SubnetForDAP3

DailyRule:
  Type: AWS::Events::Rule
  Properties:
    Description: 'Invoke Lambda function daily'
    ScheduleExpression: 'cron(0 18 * * ? *)'
    State: 'ENABLED'
    Targets:
      - Arn:
          Fn::GetAtt:
            - 'RedshiftBackup'
            - 'Arn'
        Id: 'TargetFunctionV1'

WeeklyRule:
  Type: AWS::Events::Rule
  Properties:
    Description: 'Invoke Lambda function weekly'
    ScheduleExpression: 'cron(0 18 ? * FRI *)'
    State: 'ENABLED'
    Targets:
      - Arn:
          Fn::GetAtt:
            - 'RedshiftBackup'
            - 'Arn'
        Id: 'TargetFunctionV2'

MonthlyRule:
  Type: AWS::Events::Rule
  Properties:
    Description: 'Invoke Lambda function monthly'
    ScheduleExpression: 'cron(0 0 1 * ? *)'
    State: 'ENABLED'
    Targets:
      - Arn:
          Fn::GetAtt:
            - 'RedshiftBackup'
            - 'Arn'
        Id: 'TargetFunctionV3'

PermissionForDailyEventsToInvokeLambda:
  Type: 'AWS::Lambda::Permission'
  Properties:
    FunctionName:
      Ref: RedshiftBackup
    Action: 'lambda:InvokeFunction'
    Principal: 'events.amazonaws.com'
    SourceArn:
      Fn::GetAtt:
        - 'DailyRule'
        - 'Arn'

PermissionForWeeklyEventsToInvokeLambda:
  Type: 'AWS::Lambda::Permission'
  Properties:
    FunctionName:
      Ref: RedshiftBackup
    Action: 'lambda:InvokeFunction'
    Principal: 'events.amazonaws.com'
    SourceArn:
      Fn::GetAtt:
        - 'WeeklyRule'
        - 'Arn'

PermissionForMonthlyEventsToInvokeLambda:
  Type: 'AWS::Lambda::Permission'
  Properties:
    FunctionName:
      Ref: RedshiftBackup
    Action: 'lambda:InvokeFunction'
    Principal: 'events.amazonaws.com'
    SourceArn:
      Fn::GetAtt:
        - 'MonthlyRule'
        - 'Arn'
