IAMRoleRedshiftServerless:
  Type: 'AWS::IAM::Role'
  Properties:
    RoleName: !Sub ${Environment}-redshift-serverless-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Service:
              [firehose.amazonaws.com, redshift.amazonaws.com, glue.amazonaws.com, redshift-serverless.amazonaws.com]
          Action: 'sts:AssumeRole'
    MaxSessionDuration: 3600
    Policies:
      - PolicyName: !Sub ${Environment}-redshift-serverless-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 's3:AbortMultipartUpload'
                - 's3:GetBucketLocation'
                - 's3:GetObject'
                - 's3:ListBucket'
                - 's3:ListBucketMultipartUploads'
                - 's3:PutObject'
              Resource:
                - !Sub 'arn:aws:s3:::${RawLayerBucket}'
                - !Sub 'arn:aws:s3:::${RawLayerBucket}/*'
                - !Sub 'arn:aws:s3:::${StageLayerBucket}'
                - !Sub 'arn:aws:s3:::${StageLayerBucket}/*'
            - Effect: Allow
              Resource: !Sub arn:aws:glue:eu-west-2:${AWS::AccountId}:*
              Action:
                - 'glue:GetTable'
                - 'glue:GetTables'
                - 'glue:GetDatabase'
                - 'glue:GetDatabases'
                - 'glue:GetPartitions'

MyRedshiftSecret:
  Type: 'AWS::SecretsManager::Secret'
  Properties:
    Description: This is a Secrets Manager secret for a Redshift cluster
    GenerateSecretString:
      SecretStringTemplate: '{"username": "admin"}'
      GenerateStringKey: password
      PasswordLength: 16
      ExcludeCharacters: '"''@/\'
    KmsKeyId: !Ref KmsKey

RedshiftServerlessNamespace:
  Type: 'AWS::RedshiftServerless::Namespace'
  Properties:
    AdminUsername: !Sub '{{resolve:secretsmanager:${MyRedshiftSecret}::username}}'
    AdminUserPassword: !Sub '{{resolve:secretsmanager:${MyRedshiftSecret}::password}}'
    DbName: !Sub '${Environment}-redshift'
    DefaultIamRoleArn: !GetAtt IAMRoleRedshiftServerless.Arn
    IamRoles:
      - !GetAtt IAMRoleRedshiftServerless.Arn
    FinalSnapshotName: !Sub '${Environment}-redshift-snapshot'
    FinalSnapshotRetentionPeriod: 30
    LogExports:
      - useractivitylog
    NamespaceName: !Sub '${Environment}-redshift-serverless-ns'

RedshiftServerlessWorkgroup:
  Type: 'AWS::RedshiftServerless::Workgroup'
  Properties:
    BaseCapacity: 128
    EnhancedVpcRouting: false
    NamespaceName: !Ref RedshiftServerlessNamespace
    Port: 5439
    PubliclyAccessible: false
    SubnetIds:
      - !Ref SubnetForDAP1
      - !Ref SubnetForDAP2
      - !Ref SubnetForDAP3
    WorkgroupName: !Sub '${Environment}-redshift-serverless-workgroup'

RedshiftAccessEC2:
  Type: AWS::EC2::Instance
  Properties:
    ImageId: ami-0eb260c4d5475b901 # Ubuntu Server 22.04 LTS
    InstanceType: t2.nano
    SubnetId: !Ref SubnetForDAP1
    IamInstanceProfile: !Ref RedshiftAccessEC2InstanceProfile
    BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 64
    Tags:
      - Key: Name
        Value: !Sub ${Environment}-dap-redshift-access-server

RedshiftAccessEC2InstanceProfile:
  Type: AWS::IAM::InstanceProfile
  Properties:
    InstanceProfileName: !Sub ${Environment}-dap-redshift-access-server-instance-profile
    Roles:
      - !Ref RedshiftAccessEC2Role

RedshiftAccessEC2Role:
  Type: AWS::IAM::Role
  Properties:
    RoleName: !Sub ${Environment}-dap-redshift-access-server-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

RedshiftAccessEC2SchedulingLambda:
  # checkov:skip=CKV_AWS_116: DLQ not needed as replay is not desired
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: !Sub redshift-access-ec2-scheduler-${Environment}
    Handler: redshift-access-ec2-scheduler.handler
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action:
              - ec2:Start*
              - ec2:Stop*
            Resource: !Sub arn:aws:ec2:eu-west-2:563887642259:instance/${RedshiftAccessEC2}
    ReservedConcurrentExecutions: 10
    Environment:
      # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
      Variables:
        INSTANCE_ID: !Ref RedshiftAccessEC2
        ENVIRONMENT: !Ref Environment
    Tags:
      Environment: !Ref Environment
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref SubnetForDAP1
        - !Ref SubnetForDAP2
        - !Ref SubnetForDAP3

RedshiftAccessEC2ScheduleRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: !Sub ${Environment}-redshift-access-ec2-scheduler-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - scheduler.amazonaws.com
          Action: sts:AssumeRole
    Policies:
      - PolicyName: !Sub ${Environment}-redshift-access-ec2-scheduler-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource: !GetAtt RedshiftAccessEC2SchedulingLambda.Arn

RedshiftAccessEC2ScheduleStart:
  Type: AWS::Scheduler::Schedule
  Properties:
    Name: redshift-access-server-start
    KmsKeyArn: !GetAtt KmsKey.Arn
    ScheduleExpression: cron(0 8 ? * MON-FRI *)
    FlexibleTimeWindow:
      Mode: 'OFF'
    Target:
      Arn: !GetAtt RedshiftAccessEC2SchedulingLambda.Arn
      RoleArn: !GetAtt RedshiftAccessEC2ScheduleRole.Arn
      Input: '{ "action": "start" }'

RedshiftAccessEC2ScheduleStop:
  Type: AWS::Scheduler::Schedule
  Properties:
    Name: redshift-access-server-stop
    KmsKeyArn: !GetAtt KmsKey.Arn
    ScheduleExpression: cron(0 18 ? * MON-FRI *)
    FlexibleTimeWindow:
      Mode: 'OFF'
    Target:
      Arn: !GetAtt RedshiftAccessEC2SchedulingLambda.Arn
      RoleArn: !GetAtt RedshiftAccessEC2ScheduleRole.Arn
      Input: '{ "action": "stop" }'
