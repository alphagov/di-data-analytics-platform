SustainabilityBucket:
  Type: 'AWS::S3::Bucket'
  Properties:
    AccessControl: Private
    BucketName: !Sub ${Environment}-dap-sustainability
    LoggingConfiguration:
      #DestinationBucketName: !Ref GlobalLogBucket
      DestinationBucketName: !Sub '${Environment}-dap-s3-logs'
      LogFilePrefix: dap-sustainability/log
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
    VersioningConfiguration:
      Status: Enabled
    NotificationConfiguration:
      LambdaConfigurations:
        - Function: !GetAtt SendReplicationFailureAlertsLambda.Arn
          Event: s3:Replication:*
    LifecycleConfiguration:
      # Permanently removing files after 40 days
      Rules:
        - Id: CleanupRule
          Status: Enabled
          ExpirationInDays: 30
          NoncurrentVersionExpiration:
            NoncurrentDays: 10
    ReplicationConfiguration:
      Role: !GetAtt SustainabilityBucketRole.Arn
      Rules:
        - Id: SustainabilityBucketRule
          Status: Enabled
          Priority: 1
          DeleteMarkerReplication:
            Status: Enabled
          Destination:
            Bucket: !Sub 'arn:aws:s3:::production-dap-sustainability-921370741319-shared'
            Metrics:
              Status: Enabled
          Filter:
            Prefix: ''

SustainabilityBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref SustainabilityBucket
    PolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Deny
          Action: 's3:*'
          Resource: !Sub ${SustainabilityBucket.Arn}/*
          Principal: '*'
          Condition:
            Bool:
              aws:SecureTransport: false
        # - Effect: Allow
        #   Action:
        #     - 's3:PutObject'
        #     - 's3:GetBucketLocation'
        #     - 's3:ListBucket'
        #   Resource:
        #     - !Sub ${SustainabilityBucket.Arn}
        #     - !Sub ${SustainabilityBucket.Arn}/*
        #   Principal:
        #     AWS: !GetAtt IAMRoleRedshiftServerless.Arn

SustainabilityBucketIamPolicy:
  Type: 'AWS::IAM::Policy'
  Properties:
    PolicyDocument:
      Statement:
        - Action:
            - 's3:GetReplicationConfiguration'
            - 's3:ListBucket'
            - 's3:GetObjectVersionForReplication'
            - 's3:GetObjectVersionAcl'
          Effect: Allow
          Resource:
            - !Sub ${SustainabilityBucket.Arn}
            - !Sub ${SustainabilityBucket.Arn}/*
        - Action:
            - 's3:ReplicateObject'
            - 's3:ReplicateDelete'
          Effect: Allow
          Resource:
            - !Sub 'arn:aws:s3:::production-dap-sustainability-921370741319-shared'
            - !Sub 'arn:aws:s3:::production-dap-sustainability-921370741319-shared/*'
    PolicyName: !Sub ${Environment}-dap-sustainabilityBucketIamPolicy
    Roles:
      - !Ref SustainabilityBucketRole

SustainabilityBucketRole:
  Type: 'AWS::IAM::Role'
  Properties:
    AssumeRolePolicyDocument:
      Statement:
        - Action:
            - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
              - s3.amazonaws.com

SendReplicationFailureAlertsLambda:
  # checkov:skip=CKV_AWS_116: DLQ not needed
  # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: !Sub send-replication-alerts-${Environment}
    Handler: send-slack-alerts.handler
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:Encrypt
            #Resource: !GetAtt KmsKey.Arn
            Resource: '*'
          # - Effect: Allow
          #   Action:
          #     - kms:Decrypt
          #     - kms:GenerateDataKey*
          #     - kms:Encrypt
          #   Resource: !GetAtt BuildNotificationTopicKey.Arn
          - Effect: Allow
            Action:
              - 'sns:Publish'
            Resource:
              - !Ref BuildNotificationTopic

    ReservedConcurrentExecutions: 10
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        SNS_TOPIC_ARN: !Ref BuildNotificationTopic
    Tags:
      Environment: !Ref Environment
    VpcConfig:
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
      # SubnetIds:
      #   - !Ref SubnetForDAP1
      #   - !Ref SubnetForDAP2
      #   - !Ref SubnetForDAP3
      #         VpcConfig:
      SubnetIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC

s3Permission:
  Type: AWS::Lambda::Permission
  Properties:
    FunctionName: !GetAtt SendReplicationFailureAlertsLambda.Arn
    Action: lambda:InvokeFunction
    Principal: s3.amazonaws.com
    SourceAccount: !Ref 'AWS::AccountId'
    SourceArn: !GetAtt SustainabilityBucket.Arn

BuildNotificationTopic:
  Type: AWS::SNS::Topic
  Properties:
    TopicName: !Sub ${AWS::StackName}-notifications-topic
    KmsMasterKeyId:
      Ref: BuildNotificationTopicKey

BuildNotificationTopicPolicy:
  Type: AWS::SNS::TopicPolicy
  Properties:
    Topics:
      - Ref: BuildNotificationTopic
    PolicyDocument:
      Statement:
        - Action: sns:Publish
          Effect: Allow
          Resource:
            Ref: BuildNotificationTopic
          Principal:
            Service:
              - s3.amazonaws.com

BuildNotificationTopicKey:
  Type: AWS::KMS::Key
  Properties:
    EnableKeyRotation: true
    KeyPolicy:
      Version: '2012-10-17'
      Statement:
        - Sid: Allow CodeStar Notifications to enqueue encrypted messages
          Effect: Allow
          Resource: '*'
          Action:
            - kms:Decrypt
            - kms:GenerateDataKey
          Principal:
            Service:
              - s3.amazonaws.com
        - Sid: Allow the account to manage the key
          Effect: Allow
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
          Action: kms:*
          Resource: '*'

ChatbotRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service: chatbot.amazonaws.com
          Action:
            - sts:AssumeRole
    RoleName: !Sub ${AWS::StackName}-notifications-chatbot-role
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSResourceExplorerReadOnlyAccess

ChatbotChannelConfiguration:
  Type: AWS::Chatbot::SlackChannelConfiguration
  Properties:
    ConfigurationName: !Sub ${AWS::StackName}-notifications
    GuardrailPolicies:
      - arn:aws:iam::aws:policy/ReadOnlyAccess
    IamRoleArn:
      Fn::GetAtt:
        - ChatbotRole
        - Arn
    SlackChannelId: 'C083A3B482G'
    SlackWorkspaceId: 'T8GT9416G'
    SnsTopicArns:
      - Ref: BuildNotificationTopic
