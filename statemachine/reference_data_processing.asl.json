{
    "Comment": "process reference data-sets manually curated by the business",
    "StartAt": "GetRedshiftMetadata",
    "States": {
      "GetRedshiftMetadata": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "${GetRedshiftMetadataFunctionArn}:$LATEST",
          "Payload": {
            "fileMetadata.$": "$.[0].body"
          }
        },
        "Catch": [
          {
            "ErrorEquals": [
              "States.TaskFailed",
              "States.Timeout"
            ],
            "Next": "GenerateErrorInputMessage",
            "ResultPath": null
          }
        ],
        "Next": "ReferenceDataIngestionGlueStartJobRun",
        "ResultPath": "$[0].redshiftMetadata"
      },
      "GenerateErrorInputMessage": {
        "Type": "Pass",
        "Next": "EventBridgeAlertMessagePutEvents",
        "Parameters": {
          "detail.$": "States.StringToJson($.[0].body)",
          "DetailType": "ingestion-status: FAILED"
        }
      },
      "EventBridgeAlertMessagePutEvents": {
        "Type": "Task",
        "Resource": "arn:aws:states:::events:putEvents",
        "Parameters": {
          "Entries": [
            {
              "Detail": {
                "filepath.$": "$.detail.file_path"
              },
              "DetailType.$": "$.DetailType",
              "Source": "reference-data-ingestion-pipeline"
            }
          ]
        },
        "End": true
      },
      "ReferenceDataIngestionGlueStartJobRun": {
        "Type": "Task",
        "Resource": "arn:aws:states:::glue:startJobRun.sync",
        "Parameters": {
          "Arguments": {
            "--redshift_metadata.$": "$.redshiftMetadata.Payload",
            "--reference_data_file_metadata.$": "$.body"
          },
          "JobName": "${ReferenceDataIngestionGlueJobName}"
        },
        "Catch": [
          {
            "ErrorEquals": [
              "States.TaskFailed"
            ],
            "Next": "GenerateErrorInputMessage",
            "ResultPath": null
          }
        ],
        "Next": "GenerateSuccessInputMessage",
        "ResultPath": null
      },
      "GenerateSuccessInputMessage": {
        "Type": "Pass",
        "Parameters": {
          "detail.$": "States.StringToJson($.[0].body)",
          "DetailType": "ingestion-status: SUCCESS"
        },
        "Next": "EventBridgeAlertMessagePutEvents"
      }
    }
  }