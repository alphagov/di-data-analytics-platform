name: ✳️ Add users to Quicksight from spreadsheet

on:
  workflow_dispatch:
    inputs:
      dryRun:
        type: boolean
        required: true
        description: Dry run (if true only print the users to add without actually adding them)
        default: true
      environment:
        type: choice
        required: true
        description: AWS Environment
        options: [DEV, TEST, FEATURE, PRODUCTION, PRODUCTION-PREVIEW]
        default: PRODUCTION
      type:
        type: choice
        required: true
        description: Type of user (determines which spreadsheet sheet to read)
        options: [GDS, RP]

jobs:
  get-spreadsheet-users-and-invoke-lambda:
    # These permissions are needed to interact with GitHub's OIDC Token endpoint (enabling the aws-actions/configure-aws-credentials action)
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
      - name: Install node packages
        run: npm ci
      - name: Create users file
        run: node scripts/get-quicksight-user-spreadsheet.mjs ${{ inputs.type }} ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_CREDENTIALS }} > spreadsheet.json
      - name: Assume AWS add users lambda invoke role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets[format('QUICKSIGHT_LAMBDAS_INVOKE_ROLE_{0}', inputs.environment)] }}
      - name: Invoke lambda
        run: |
          PAYLOAD=$(echo "{\"dryRun\": ${{ inputs.dryRun }}, \"spreadsheet\": $(cat spreadsheet.json)}")
          echo "Lambda request"
          echo "$PAYLOAD" | jq

          ENCODED=$(echo "$PAYLOAD" | openssl base64)
          echo -e "\nLambda invocation"
          aws --region eu-west-2 lambda invoke --function-name quicksight-add-users-from-spreadsheet --payload "$ENCODED" out.json

          echo -e "\nLambda response"
          cat out.json | jq
